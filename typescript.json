{
	// Basic TypeScript
	"Async function with try-catch": {
		"prefix": "ts-async",
		"body": [
			"async () => {",
			"  try {",
			"    ",
			"  } catch (err) {",
			"    throw err;",
			"  }",
			"}"
		]
	},
	"Null or undefined check": {
		"prefix": "ts-checkempty",
		"body": [
			"if (${1:value} === undefined || ${1:value} === null) {",
			"  ",
			"}"
		]
	},
	"Update if exists": {
		"prefix": "ts-update",
		"body": [
			"${1:target} = (${2:value} === undefined || ${2:value} === null) ? ${1:target} : ${2:value};"
		]
	},
	// Express
	"Express Router": {
		"prefix": "exp-router",
		"body": [
			"import React from 'react';",
			"",
			"interface ${1:name}Props {",
			"  ",
			"}",
			"interface ${1:name}States {",
			"  ",
			"}",
			"",
			"class ${1:name}Component extends React.Component<${1:name}Props, ${1:name}States> {",
			"  constructor(props: ${1:name}Props) {",
			"    super(props);",
			"    this.states = {",
			"      ",
			"    };",
			"  }",
			"  render() {",
			"    return (",
			"      <div></div>",
			"    );",
			"  }",
			"}",
			"",
			"export default router;",
			""
		]
	},
	// Express
	"Express Failing Response": {
		"prefix": "exp-fail",
		"body": [
			"res.status(${1:code}).json({",
			"  success: false",
			"});",
			"return;"
		]
	},
	// Mongoose
	"Mongoose Schema": {
		"prefix": "mong-schema",
		"body": [
			"import mongoose from 'mongoose';",
			"export interface ${1:name} extends mongoose.Document {",
			"  ",
			"}",
			"",
			"const schema = new mongoose.Schema({",
			"  ",
			"});",
			"",
			"export const ${1:name}Model = mongoose.model<${1:name}>('${1:name}', schema);",
			""
		]
	},
	// Documentations
	"apiDoc Comment": {
		"prefix": "apidoc",
		"body": [
			"/**",
			" * @api {${1:method}} ${3:path} ${2:name}",
			" * @apiName ${2:name}",
			" * @apiGroup ${4:group}",
			" *",
			" * @apiDescription ",
			" *",
			" * @apiParam",
			" * @apiSuccess",
			" * @apiError",
			" */"
		]
	}
}